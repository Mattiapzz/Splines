
.. _program_listing_file__Users_enrico_Ricerca_develop_C++_pins-mechatronix_LibSources_submodules_Splines_src_SplineSet.hxx:

Program Listing for File SplineSet.hxx
======================================

|exhale_lsh| :ref:`Return to documentation for file <file__Users_enrico_Ricerca_develop_C++_pins-mechatronix_LibSources_submodules_Splines_src_SplineSet.hxx>` (``/Users/enrico/Ricerca/develop/C++/pins-mechatronix/LibSources/submodules/Splines/src/SplineSet.hxx``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*--------------------------------------------------------------------------*\
    |                                                                          |
    |  Copyright (C) 2016                                                      |
    |                                                                          |
    |         , __                 , __                                        |
    |        /|/  \               /|/  \                                       |
    |         | __/ _   ,_         | __/ _   ,_                                |
    |         |   \|/  /  |  |   | |   \|/  /  |  |   |                        |
    |         |(__/|__/   |_/ \_/|/|(__/|__/   |_/ \_/|/                       |
    |                           /|                   /|                        |
    |                           \|                   \|                        |
    |                                                                          |
    |      Enrico Bertolazzi                                                   |
    |      Dipartimento di Ingegneria Industriale                              |
    |      Universita` degli Studi di Trento                                   |
    |      email: enrico.bertolazzi@unitn.it                                   |
    |                                                                          |
   \*--------------------------------------------------------------------------*/
   
   /*\
    |   ____        _ _            ____       _
    |  / ___| _ __ | (_)_ __   ___/ ___|  ___| |_
    |  \___ \| '_ \| | | '_ \ / _ \___ \ / _ \ __|
    |   ___) | |_) | | | | | |  __/___) |  __/ |_
    |  |____/| .__/|_|_|_| |_|\___|____/ \___|\__|
    |        |_|
   \*/
   
   namespace Splines {
   
     class SplineSet {
   
       SplineSet( SplineSet const & ) = delete;
       SplineSet const & operator = ( SplineSet const & ) = delete;
   
       class BinarySearch {
       public:
         typedef std::pair<std::string,integer> DATA_TYPE;
       private:
         mutable std::vector<DATA_TYPE> data;
       public:
         BinarySearch() { data.clear(); data.reserve(256); }
         ~BinarySearch() { data.clear(); }
   
         void clear() { data.clear(); data.reserve(256); }
   
         integer n_elem() const { return integer(data.size()); }
   
         DATA_TYPE const &
         get_elem( integer i ) const { return data[size_t(i)]; }
   
         integer search( std::string const & id ) const;
         void    insert( std::string const & id, integer position );
       };
   
     protected:
   
       string const m_name;
   
       Utils::Malloc<real_type>  m_baseValue;
       Utils::Malloc<real_type*> m_basePointer;
       Utils::Malloc<void*>      m_baseSplines;
       Utils::Malloc<int>        m_baseInt;
   
       integer m_npts;
       integer m_nspl;
   
       real_type *  m_X;
       real_type ** m_Y;
       real_type ** m_Yp;
       real_type ** m_Ypp;
       real_type *  m_Ymin;
       real_type *  m_Ymax;
   
       Spline ** m_splines;
       int     * m_is_monotone;
   
       BinarySearch m_header_to_position;
   
     private:
   
       Spline const *
       intersect( integer spl, real_type zeta, real_type & x ) const;
   
     public:
   
       SplineSet( string const & name = "SplineSet" );
   
       virtual
       ~SplineSet();
   
       string const & name() const { return m_name; }
   
       string const &
       header( integer i ) const
       { return m_splines[i]->name(); }
   
       // vectorial values
       void get_headers( std::vector<std::string> & names ) const;
   
       string name_list() const;
   
       // return +1 = strict monotone, 0 weak monotone, -1 non monotone
       int
       isMonotone( integer i ) const
       { return m_is_monotone[i]; }
   
       integer numPoints() const { return m_npts; }
   
       integer numSplines() const { return m_nspl; }
   
       integer getPosition( char const * hdr ) const;
   
       real_type const * xNodes() const { return m_X; }
   
       real_type const * yNodes( integer i ) const;
   
       real_type
       xNode( integer npt ) const
       { return m_X[npt]; }
   
       real_type
       yNode( integer npt, integer spl ) const
       { return m_Y[spl][npt]; }
   
       real_type xMin() const { return m_X[0]; }
   
       real_type xMax() const { return m_X[m_npts-1]; }
   
       real_type yMin( integer spl ) const { return m_Ymin[size_t(spl)]; }
   
       real_type yMax( integer spl ) const { return m_Ymax[size_t(spl)]; }
   
       real_type
       yMin( char const * spl ) const {
         integer idx = this->getPosition(spl);
         return m_Ymin[idx];
       }
   
       real_type
       yMax( char const * spl ) const {
         integer idx = this->getPosition(spl);
         return m_Ymax[idx];
       }
   
       Spline * getSpline( integer i ) const;
   
       Spline *
       getSpline( char const * hdr ) const {
         integer idx = this->getPosition(hdr);
         return m_splines[idx];
       }
   
       real_type
       operator () ( real_type x, integer spl ) const {
         Spline const * S = this->getSpline(spl);
         return (*S)(x);
       }
   
       real_type
       eval( real_type x, integer spl ) const {
         Spline const * S = this->getSpline(spl);
         return (*S)(x);
       }
   
       real_type
       D( real_type x, integer spl ) const {
         Spline const * S = this->getSpline(spl);
         return S->D(x);
       }
   
       real_type
       eval_D( real_type x, integer spl ) const {
         Spline const * S = this->getSpline(spl);
         return S->D(x);
       }
   
       real_type
       DD( real_type x, integer spl ) const {
         Spline const * S = this->getSpline(spl);
         return S->DD(x);
       }
   
       real_type
       eval_DD( real_type x, integer spl ) const {
         Spline const * S = this->getSpline(spl);
         return S->DD(x);
       }
   
       real_type
       DDD( real_type x, integer spl ) const {
         Spline const * S = this->getSpline(spl);
         return S->DDD(x);
       }
   
       real_type
       eval_DDD( real_type x, integer spl ) const {
         Spline const * S = this->getSpline(spl);
         return S->DDD(x);
       }
   
       real_type
       DDDD( real_type x, integer spl ) const {
         Spline const * S = this->getSpline(spl);
         return S->DDDD(x);
       }
   
       real_type
       eval_DDDD( real_type x, integer spl ) const {
         Spline const * S = this->getSpline(spl);
         return S->DDDD(x);
       }
   
       real_type
       DDDDD( real_type x, integer spl ) const {
         Spline const * S = this->getSpline(spl);
         return S->DDDDD(x);
       }
   
       real_type
       eval_DDDDD( real_type x, integer spl ) const {
         Spline const * S = this->getSpline(spl);
         return S->DDDDD(x);
       }
   
       real_type
       eval( real_type x, char const * name ) const {
         Spline const * S = this->getSpline(name);
         return (*S)(x);
       }
   
       real_type
       eval_D( real_type x, char const * name ) const {
         Spline const * S = this->getSpline(name);
         return S->D(x);
       }
   
       real_type
       eval_DD( real_type x, char const * name ) const {
         Spline const * S = this->getSpline(name);
         return S->DD(x);
       }
   
       real_type
       eval_DDD( real_type x, char const * name ) const {
         Spline const * S = this->getSpline(name);
         return S->DDD(x);
       }
   
       real_type
       eval_DDDD( real_type x, char const * name ) const {
         Spline const * S = this->getSpline(name);
         return S->DDDD(x);
       }
   
       real_type
       eval_DDDDD( real_type x, char const * name ) const {
         Spline const * S = this->getSpline(name);
         return S->DDDDD(x);
       }
   
       // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   
       // \group Evaluate to std vector
   
       void eval( real_type x, vector<real_type> & vals ) const;
   
       void eval_D( real_type x, vector<real_type> & vals ) const;
   
       void eval_DD( real_type x, vector<real_type> & vals ) const;
   
       void eval_DDD( real_type x, vector<real_type> & vals ) const;
   
       void eval_DDDD( real_type x, vector<real_type> & vals ) const;
   
       void eval_DDDDD( real_type x, vector<real_type> & vals ) const;
   
   
       // \group Evaluate to vector
   
       void
       eval(
         real_type         x,
         real_type * const vals,
         integer           incy = 1
       ) const;
   
       void
       eval_D(
         real_type         x,
         real_type * const vals,
         integer           incy = 1
       ) const;
   
       void
       eval_DD(
         real_type         x,
         real_type * const vals,
         integer           incy = 1
       ) const;
   
       void
       eval_DDD(
         real_type         x,
         real_type * const vals,
         integer           incy = 1
       ) const;
   
       void
       eval_DDDD(
         real_type         x,
         real_type * const vals,
         integer           incy = 1
       ) const;
   
       void
       eval_DDDDD(
         real_type         x,
         real_type * const vals,
         integer           incy = 1
       ) const;
   
   
       // \group Evaluate using another spline as independent
   
       // change independent variable
       void
       eval2(
         integer             spl,
         real_type           zeta,
         vector<real_type> & vals
       ) const;
   
       void
       eval2_D(
         integer             spl,
         real_type           zeta,
         vector<real_type> & vals
       ) const;
   
       void
       eval2_DD(
         integer             spl,
         real_type           zeta,
         vector<real_type> & vals
       ) const;
   
       void
       eval2_DDD(
         integer             spl,
         real_type           zeta,
         vector<real_type> & vals
       ) const;
   
   
       // \group Evaluate using another spline as independent
   
       void
       eval2(
         integer           spl,
         real_type         zeta,
         real_type * const vals,
         integer           incy = 1
       ) const;
   
       void
       eval2_D(
         integer           spl,
         real_type         zeta,
         real_type * const vals,
         integer           incy = 1
       ) const;
   
       void
       eval2_DD(
         integer           spl,
         real_type         zeta,
         real_type * const vals,
         integer           incy = 1
       ) const;
   
       void
       eval2_DDD(
         integer           spl,
         real_type         zeta,
         real_type * const vals,
         integer           incy = 1
       ) const;
   
   
       // \group Evaluate using another spline as independent
   
       real_type
       eval2(
         real_type    zeta,
         char const * indep,
         char const * name
       ) const;
   
       real_type
       eval2_D(
         real_type    zeta,
         char const * indep,
         char const * name
       ) const;
   
       real_type
       eval2_DD(
         real_type    zeta,
         char const * indep,
         char const * name
       ) const;
   
       real_type
       eval2_DDD(
         real_type    zeta,
         char const * indep,
         char const * name
       ) const;
   
   
       // \group Evaluate using another spline as independent
   
       real_type
       eval2(
         real_type zeta,
         integer   indep,
         integer   spl
       ) const;
   
       real_type
       eval2_D(
         real_type zeta,
         integer   indep,
         integer   spl
       ) const;
   
       real_type
       eval2_DD(
         real_type zeta,
         integer   indep,
         integer   spl
       ) const;
   
       real_type
       eval2_DDD(
         real_type zeta,
         integer   indep,
         integer   spl
       ) const;
   
   
       // \group Evaluate onto a vector
   
       void
       eval( real_type x, GenericContainer & vals ) const;
   
       void
       eval( vec_real_type const & vec, GenericContainer & vals ) const;
   
       void
       eval(
         real_type               x,
         vec_string_type const & columns,
         GenericContainer      & vals
       ) const;
   
       void
       eval(
         vec_real_type   const & vec,
         vec_string_type const & columns,
         GenericContainer      & vals
       ) const;
   
   
       void
       eval2(
         real_type          zeta,
         integer            indep,
         GenericContainer & vals
       ) const;
   
       void
       eval2(
         vec_real_type const & zetas,
         integer               indep,
         GenericContainer    & vals
       ) const;
   
       void
       eval2(
         real_type               zeta,
         integer                 indep,
         vec_string_type const & columns,
         GenericContainer      & vals
       ) const;
   
       void
       eval2(
         vec_real_type   const & zetas,
         integer                 indep,
         vec_string_type const & columns,
         GenericContainer      & vals
       ) const;
   
       void
       eval2(
         real_type          zeta,
         char const       * indep,
         GenericContainer & vals
       ) const {
         this->eval2( zeta, this->getPosition(indep), vals );
       }
   
       void
       eval2(
         vec_real_type const & zetas,
         char const          * indep,
         GenericContainer    & vals
       ) const {
         this->eval2( zetas, this->getPosition(indep), vals );
       }
   
       void
       eval2(
         real_type               zeta,
         char const            * indep,
         vec_string_type const & columns,
         GenericContainer      & vals
       ) const {
         this->eval2( zeta, this->getPosition(indep), columns, vals );
       }
   
       void
       eval2(
         vec_real_type const   & zetas,
         char const            * indep,
         vec_string_type const & columns,
         GenericContainer      & vals
       ) const {
         this->eval2( zetas, this->getPosition(indep), columns, vals );
       }
   
       void
       eval_D(
         real_type          x,
         GenericContainer & vals
       ) const;
   
       void
       eval_D(
         vec_real_type const & vec,
         GenericContainer    & vals
       ) const;
   
       void
       eval_D(
         real_type               x,
         vec_string_type const & columns,
         GenericContainer      & vals
       ) const;
   
       void
       eval_D(
         vec_real_type const   & vec,
         vec_string_type const & columns,
         GenericContainer      & vals
       ) const;
   
       void
       eval2_D(
         real_type          zeta,
         integer            indep,
         GenericContainer & vals
       ) const;
   
       void
       eval2_D(
         vec_real_type const & zetas,
         integer               indep,
         GenericContainer    & vals
       ) const;
   
       void
       eval2_D(
         real_type               zeta,
         integer                 indep,
         vec_string_type const & columns,
         GenericContainer      & vals
       ) const;
   
       void
       eval2_D(
         vec_real_type   const & zetas,
         integer                 indep,
         vec_string_type const & columns,
         GenericContainer      & vals
       ) const;
   
       void
       eval2_D(
         real_type          zeta,
         char const       * indep,
         GenericContainer & vals
       ) const {
         this->eval2_D( zeta, this->getPosition(indep), vals );
       }
   
       void
       eval2_D(
         vec_real_type const & zetas,
         char const          * indep,
         GenericContainer    & vals
       ) const {
         this->eval2_D( zetas, this->getPosition(indep), vals );
       }
   
       void
       eval2_D(
         real_type               zeta,
         char const            * indep,
         vec_string_type const & columns,
         GenericContainer      & vals
       ) const {
         this->eval2_D( zeta, this->getPosition(indep), columns, vals );
       }
   
       void
       eval2_D(
         vec_real_type const   & zetas,
         char const            * indep,
         vec_string_type const & columns,
         GenericContainer      & vals
       ) const {
         this->eval2_D( zetas, this->getPosition(indep), columns, vals );
       }
   
       void
       eval_DD(
         real_type          x,
         GenericContainer & vals
       ) const;
   
       void
       eval_DD(
         vec_real_type const & vec,
         GenericContainer    & vals
       ) const;
   
       void
       eval_DD(
         real_type               x,
         vec_string_type const & columns,
         GenericContainer      & vals
       ) const;
   
       void
       eval_DD(
         vec_real_type   const & vec,
         vec_string_type const & columns,
         GenericContainer      & vals
       ) const;
   
       void
       eval2_DD(
         real_type          zeta,
         integer            indep,
         GenericContainer & vals
       ) const;
   
       void
       eval2_DD(
         vec_real_type const & zetas,
         integer               indep,
         GenericContainer    & vals
       ) const;
   
       void
       eval2_DD(
         real_type               zeta,
         integer                 indep,
         vec_string_type const & columns,
         GenericContainer      & vals
       ) const;
   
       void
       eval2_DD(
         vec_real_type   const & zetas,
         integer                 indep,
         vec_string_type const & columns,
         GenericContainer      & vals
       ) const;
   
       void
       eval2_DD(
         real_type          zeta,
         char const       * indep,
         GenericContainer & vals
       ) const {
         this->eval2_DD( zeta, this->getPosition(indep), vals );
       }
   
       void
       eval2_DD(
         vec_real_type const & zetas,
         char const          * indep,
         GenericContainer    & vals
       ) const {
         this->eval2_DD( zetas, this->getPosition(indep), vals );
       }
   
       void
       eval2_DD(
         real_type               zeta,
         char const            * indep,
         vec_string_type const & columns,
         GenericContainer      & vals
       ) const {
         this->eval2_DD( zeta, this->getPosition(indep), columns, vals );
       }
   
       void
       eval2_DD(
         vec_real_type   const & zetas,
         char            const * indep,
         vec_string_type const & columns,
         GenericContainer      & vals
       ) const {
         this->eval2_DD( zetas, this->getPosition(indep), columns, vals );
       }
   
       void
       eval_DDD(
         real_type          x,
         GenericContainer & vals
       ) const;
   
       void
       eval_DDD(
         vec_real_type const & vec,
         GenericContainer    & vals
       ) const;
   
       void
       eval_DDD(
         real_type               x,
         vec_string_type const & columns,
         GenericContainer      & vals
       ) const;
   
       void
       eval_DDD(
         vec_real_type   const & vec,
         vec_string_type const & columns,
         GenericContainer      & vals
       ) const;
   
       void
       eval2_DDD(
         real_type          zeta,
         integer            indep,
         GenericContainer & vals
       ) const;
   
       void
       eval2_DDD(
         vec_real_type const & zetas,
         integer               indep,
         GenericContainer    & vals
       ) const;
   
       void
       eval2_DDD(
         real_type               zeta,
         integer                 indep,
         vec_string_type const & columns,
         GenericContainer      & vals
       ) const;
   
       void
       eval2_DDD(
         vec_real_type   const & zetas,
         integer                 indep,
         vec_string_type const & columns,
         GenericContainer      & vals
       ) const;
   
       void
       eval2_DDD(
         real_type          zeta,
         char const       * indep,
         GenericContainer & vals
       ) const {
         this->eval2_DDD( zeta, this->getPosition(indep), vals );
       }
   
       void
       eval2_DDD(
         vec_real_type const & zetas,
         char          const * indep,
         GenericContainer    & vals
       ) const {
         this->eval2_DDD( zetas, this->getPosition(indep), vals );
       }
   
       void
       eval2_DDD(
         real_type               zeta,
         char            const * indep,
         vec_string_type const & columns,
         GenericContainer      & vals
       ) const {
         this->eval2_DDD( zeta, this->getPosition(indep), columns, vals );
       }
   
       void
       eval2_DDD(
         vec_real_type   const & zetas,
         char            const * indep,
         vec_string_type const & columns,
         GenericContainer      & vals
       ) const {
         this->eval2_DDD( zetas, this->getPosition(indep), columns, vals );
       }
   
   
       void
       build(
         integer               nspl,
         integer               npts,
         char         const ** headers,
         SplineType1D const *  stype,
         real_type    const *  X,
         real_type    const ** Y,
         real_type    const ** Yp = nullptr
       );
   
       void
       setup( GenericContainer const & gc );
   
       void
       build( GenericContainer const & gc )
       { this->setup(gc); }
   
       unsigned
       type() const
       { return SPLINE_SET_TYPE; }
   
       string
       info() const;
   
       void
       info( ostream_type & stream ) const
       { stream << this->info() << '\n'; }
   
       void
       dump_table( ostream_type & s, integer num_points ) const;
   
     };
   
   }
   
   // EOF: SplineSet.hxx
