
.. _program_listing_file__Users_enrico_Ricerca_develop_C++_pins-mechatronix_LibSources_submodules_Splines_src_SplineQuinticBase.hxx:

Program Listing for File SplineQuinticBase.hxx
==============================================

|exhale_lsh| :ref:`Return to documentation for file <file__Users_enrico_Ricerca_develop_C++_pins-mechatronix_LibSources_submodules_Splines_src_SplineQuinticBase.hxx>` (``/Users/enrico/Ricerca/develop/C++/pins-mechatronix/LibSources/submodules/Splines/src/SplineQuinticBase.hxx``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*--------------------------------------------------------------------------*\
    |                                                                          |
    |  Copyright (C) 2016                                                      |
    |                                                                          |
    |         , __                 , __                                        |
    |        /|/  \               /|/  \                                       |
    |         | __/ _   ,_         | __/ _   ,_                                |
    |         |   \|/  /  |  |   | |   \|/  /  |  |   |                        |
    |         |(__/|__/   |_/ \_/|/|(__/|__/   |_/ \_/|/                       |
    |                           /|                   /|                        |
    |                           \|                   \|                        |
    |                                                                          |
    |      Enrico Bertolazzi                                                   |
    |      Dipartimento di Ingegneria Industriale                              |
    |      Universita` degli Studi di Trento                                   |
    |      email: enrico.bertolazzi@unitn.it                                   |
    |                                                                          |
   \*--------------------------------------------------------------------------*/
   
   /*\
    |    ___        _       _   _      ____        _ _            ____
    |   / _ \ _   _(_)_ __ | |_(_) ___/ ___| _ __ | (_)_ __   ___| __ )  __ _ ___  ___
    |  | | | | | | | | '_ \| __| |/ __\___ \| '_ \| | | '_ \ / _ \  _ \ / _` / __|/ _ \
    |  | |_| | |_| | | | | | |_| | (__ ___) | |_) | | | | | |  __/ |_) | (_| \__ \  __/
    |   \__\_\\__,_|_|_| |_|\__|_|\___|____/| .__/|_|_|_| |_|\___|____/ \__,_|___/\___|
    |                                       |_|
    |
   \*/
   
   namespace Splines {
   
     class QuinticSplineBase : public Spline {
     protected:
       Utils::Malloc<real_type> m_baseValue;
   
       real_type * m_Yp;
       real_type * m_Ypp;
       bool        m_external_alloc;
   
     public:
   
       #ifndef DOXYGEN_SHOULD_SKIP_THIS
       using Spline::build;
       #endif
   
       QuinticSplineBase( string const & name = "Spline" )
       : Spline(name)
       , m_baseValue(name+"_memeory")
       , m_Yp(nullptr)
       , m_Ypp(nullptr)
       , m_external_alloc(false)
       {}
   
       virtual
       ~QuinticSplineBase() override
       {}
   
       void
       copySpline( QuinticSplineBase const & S );
   
       real_type
       ypNode( integer i ) const
       { return m_Yp[size_t(i)]; }
   
       real_type
       yppNode( integer i ) const
       { return m_Ypp[size_t(i)]; }
   
       void
       setRange( real_type xmin, real_type xmax );
   
       void
       reserve_external(
         integer       n,
         real_type * & p_x,
         real_type * & p_y,
         real_type * & p_Yp,
         real_type * & p_Ypp
       );
   
       // --------------------------- VIRTUALS -----------------------------------
   
       virtual
       real_type
       operator () ( real_type x ) const override;
   
       virtual
       real_type
       D( real_type x ) const override;
   
       virtual
       real_type
       DD( real_type x ) const override;
   
       virtual
       real_type
       DDD( real_type x ) const override;
   
       virtual
       real_type
       DDDD( real_type x ) const override;
   
       virtual
       real_type
       DDDDD( real_type x ) const override;
   
       virtual
       real_type
       id_eval( integer ni, real_type x ) const override;
   
       virtual
       real_type
       id_D( integer ni, real_type x ) const override;
   
       virtual
       real_type
       id_DD( integer ni, real_type x ) const override;
   
       virtual
       real_type
       id_DDD( integer ni, real_type x ) const override;
   
       virtual
       real_type
       id_DDDD( integer ni, real_type x ) const override;
   
       virtual
       real_type
       id_DDDDD( integer ni, real_type x ) const override;
   
       virtual
       void
       writeToStream( ostream_type & s ) const override;
   
       virtual
       unsigned
       type() const override
       { return QUINTIC_TYPE; }
   
       virtual
       void
       reserve( integer npts ) override;
   
       virtual
       void
       clear() override;
   
       virtual
       integer // order
       coeffs(
         real_type cfs[],
         real_type nodes[],
         bool      transpose = false
       ) const override;
   
       virtual
       integer // order
       order() const override;
   
     };
   
   }
   
   // EOF: SplineQuinticBase.hxx
