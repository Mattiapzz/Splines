
.. _program_listing_file__Users_enrico_Ricerca_develop_C++_pins-mechatronix_LibSources_submodules_Splines_src_SplineBiCubic.hxx:

Program Listing for File SplineBiCubic.hxx
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file__Users_enrico_Ricerca_develop_C++_pins-mechatronix_LibSources_submodules_Splines_src_SplineBiCubic.hxx>` (``/Users/enrico/Ricerca/develop/C++/pins-mechatronix/LibSources/submodules/Splines/src/SplineBiCubic.hxx``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*--------------------------------------------------------------------------*\
    |                                                                          |
    |  Copyright (C) 2016                                                      |
    |                                                                          |
    |         , __                 , __                                        |
    |        /|/  \               /|/  \                                       |
    |         | __/ _   ,_         | __/ _   ,_                                | 
    |         |   \|/  /  |  |   | |   \|/  /  |  |   |                        |
    |         |(__/|__/   |_/ \_/|/|(__/|__/   |_/ \_/|/                       |
    |                           /|                   /|                        |
    |                           \|                   \|                        |
    |                                                                          |
    |      Enrico Bertolazzi                                                   |
    |      Dipartimento di Ingegneria Industriale                              |
    |      Universita` degli Studi di Trento                                   |
    |      email: enrico.bertolazzi@unitn.it                                   |
    |                                                                          |
   \*--------------------------------------------------------------------------*/
   
   namespace Splines {
   
     /*\
      |   ____  _  ____      _     _      ____        _ _            ____
      |  | __ )(_)/ ___|   _| |__ (_) ___/ ___| _ __ | (_)_ __   ___| __ )  __ _ ___  ___
      |  |  _ \| | |  | | | | '_ \| |/ __\___ \| '_ \| | | '_ \ / _ \  _ \ / _` / __|/ _ \
      |  | |_) | | |__| |_| | |_) | | (__ ___) | |_) | | | | | |  __/ |_) | (_| \__ \  __/
      |  |____/|_|\____\__,_|_.__/|_|\___|____/| .__/|_|_|_| |_|\___|____/ \__,_|___/\___|
      |                                        |_|
     \*/
   
     class BiCubicSplineBase : public SplineSurf {
     protected:
   
       Utils::Malloc<real_type> m_mem_bicubic;
   
       real_type * m_DX;
       real_type * m_DY;
       real_type * m_DXY;
   
       void load( integer i, integer j, real_type bili3[4][4] ) const;
   
     public:
   
       using SplineSurf::m_nx;
       using SplineSurf::m_ny;
   
       using SplineSurf::m_X;
       using SplineSurf::m_Y;
       using SplineSurf::m_Z;
   
       BiCubicSplineBase( string const & name = "Spline" )
       : SplineSurf( name )
       , m_mem_bicubic("BiCubicSplineBase")
       , m_DX(nullptr)
       , m_DY(nullptr)
       , m_DXY(nullptr)
       {}
   
       virtual
       ~BiCubicSplineBase() override
       {}
   
       real_type
       DxNode ( integer i, integer j ) const
       { return m_DX[size_t(this->ipos_C(i,j))]; }
   
       real_type
       DyNode ( integer i, integer j ) const
       { return m_DY[size_t(this->ipos_C(i,j))]; }
   
       real_type
       DxyNode( integer i, integer j ) const
       { return m_DXY[size_t(this->ipos_C(i,j))]; }
   
       virtual
       real_type
       operator () ( real_type x, real_type y ) const override;
   
       virtual
       void
       D( real_type x, real_type y, real_type d[3] ) const override;
   
       virtual
       real_type
       Dx( real_type x, real_type y ) const override;
   
       virtual
       real_type
       Dy( real_type x, real_type y ) const override;
   
       virtual
       void
       DD( real_type x, real_type y, real_type dd[6] ) const override;
   
       virtual
       real_type
       Dxx( real_type x, real_type y ) const override;
   
       virtual
       real_type
       Dxy( real_type x, real_type y ) const override;
   
       virtual
       real_type
       Dyy( real_type x, real_type y ) const override;
     };
   
     /*\
      |   ____  _  ____      _     _      ____        _ _
      |  | __ )(_)/ ___|   _| |__ (_) ___/ ___| _ __ | (_)_ __   ___
      |  |  _ \| | |  | | | | '_ \| |/ __\___ \| '_ \| | | '_ \ / _ \
      |  | |_) | | |__| |_| | |_) | | (__ ___) | |_) | | | | | |  __/
      |  |____/|_|\____\__,_|_.__/|_|\___|____/| .__/|_|_|_| |_|\___|
      |                                        |_|
     \*/
     class BiCubicSpline : public BiCubicSplineBase {
       virtual void makeSpline() override;
   
     public:
   
       using BiCubicSplineBase::m_mem_bicubic;
       using BiCubicSplineBase::m_DX;
       using BiCubicSplineBase::m_DY;
       using BiCubicSplineBase::m_DXY;
   
       BiCubicSpline( string const & name = "Spline" )
       : BiCubicSplineBase( name )
       {}
   
       virtual
       ~BiCubicSpline() override
       {}
   
       virtual
       void
       writeToStream( ostream_type & s ) const override;
   
       virtual
       char const *
       type_name() const override;
   
     };
   
   }
   
   // EOF: SplineBiCubic.hxx
