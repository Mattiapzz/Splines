
.. _program_listing_file__Users_enrico_Ricerca_develop_C++_pins-mechatronix_LibSources_submodules_Splines_src_SplineCubic.hxx:

Program Listing for File SplineCubic.hxx
========================================

|exhale_lsh| :ref:`Return to documentation for file <file__Users_enrico_Ricerca_develop_C++_pins-mechatronix_LibSources_submodules_Splines_src_SplineCubic.hxx>` (``/Users/enrico/Ricerca/develop/C++/pins-mechatronix/LibSources/submodules/Splines/src/SplineCubic.hxx``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*--------------------------------------------------------------------------*\
    |                                                                          |
    |  Copyright (C) 2016                                                      |
    |                                                                          |
    |         , __                 , __                                        |
    |        /|/  \               /|/  \                                       |
    |         | __/ _   ,_         | __/ _   ,_                                |
    |         |   \|/  /  |  |   | |   \|/  /  |  |   |                        |
    |         |(__/|__/   |_/ \_/|/|(__/|__/   |_/ \_/|/                       |
    |                           /|                   /|                        |
    |                           \|                   \|                        |
    |                                                                          |
    |      Enrico Bertolazzi                                                   |
    |      Dipartimento di Ingegneria Industriale                              |
    |      Universita` degli Studi di Trento                                   |
    |      email: enrico.bertolazzi@unitn.it                                   |
    |                                                                          |
   \*--------------------------------------------------------------------------*/
   
   /*\
    |    ____      _     _      ____        _ _
    |   / ___|   _| |__ (_) ___/ ___| _ __ | (_)_ __   ___
    |  | |  | | | | '_ \| |/ __\___ \| '_ \| | | '_ \ / _ \
    |  | |__| |_| | |_) | | (__ ___) | |_) | | | | | |  __/
    |   \____\__,_|_.__/|_|\___|____/| .__/|_|_|_| |_|\___|
    |                                |_|
   \*/
   
   namespace Splines {
   
     typedef enum {
       EXTRAPOLATE_BC = 0,
       NATURAL_BC,
       PARABOLIC_RUNOUT_BC,
       NOT_A_KNOT
     } CUBIC_SPLINE_TYPE_BC;
   
     void
     CubicSpline_build(
       real_type const      X[],
       real_type const      Y[],
       real_type            Yp[],
       integer              npts,
       CUBIC_SPLINE_TYPE_BC bc0,
       CUBIC_SPLINE_TYPE_BC bcn
     );
   
     void
     CubicSpline_build(
       real_type const      X[],
       real_type const      Y[],
       real_type            Yp[],
       real_type            Ypp[],
       real_type            L[],
       real_type            D[],
       real_type            U[],
       integer              npts,
       CUBIC_SPLINE_TYPE_BC bc0,
       CUBIC_SPLINE_TYPE_BC bcn
     );
   
     class CubicSpline : public CubicSplineBase {
     private:
       CUBIC_SPLINE_TYPE_BC m_bc0, m_bcn;
     public:
   
       #ifndef DOXYGEN_SHOULD_SKIP_THIS
       using CubicSplineBase::build;
       using CubicSplineBase::reserve;
       #endif
   
       CubicSpline( string const & name = "CubicSpline" )
       : CubicSplineBase( name )
       , m_bc0( EXTRAPOLATE_BC )
       , m_bcn( EXTRAPOLATE_BC )
       {}
   
       virtual
       ~CubicSpline() override
       {}
   
       void
       setInitialBC( CUBIC_SPLINE_TYPE_BC bc0 )
       { m_bc0 = bc0; }
   
       void
       setFinalBC( CUBIC_SPLINE_TYPE_BC bcn )
       { m_bcn = bcn; }
   
       virtual
       unsigned
       type() const override
       { return CUBIC_TYPE; }
   
       // --------------------------- VIRTUALS -----------------------------------
   
       virtual
       void
       build() override;
   
       virtual
       void
       setup( GenericContainer const & gc ) override;
   
     };
   
   }
   
   // EOF: SplineCubic.hxx
